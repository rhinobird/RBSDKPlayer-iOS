// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RBSDKPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS_NAMED("Avatar")
@interface RBSDKAvatar : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nullable small;
@property (nonatomic, readonly, copy) NSURL * _Nullable medium;
@property (nonatomic, readonly, copy) NSURL * _Nullable navBar;
@end




SWIFT_CLASS_NAMED("Clip")
@interface RBSDKClip : NSObject
@property (nonatomic, readonly) NSInteger startMilliseconds;
@property (nonatomic, readonly) NSInteger endMilliseconds;
- (nonnull instancetype)initWithStartMilliseconds:(NSInteger)startMilliseconds endMilliseconds:(NSInteger)endMilliseconds OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class RBSDKCollectionMoment;

SWIFT_CLASS_NAMED("Collection")
@interface RBSDKCollection : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nullable caption;
@property (nonatomic, readonly, copy) NSString * _Nullable createdAt;
@property (nonatomic, readonly, copy) NSString * _Nullable updatedAt;
@property (nonatomic, readonly, copy) NSArray<RBSDKCollectionMoment *> * _Nullable collectionMoments;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id caption:(NSString * _Nullable)caption createdAt:(NSString * _Nullable)createdAt updatedAt:(NSString * _Nullable)updatedAt collectionMoments:(NSArray<RBSDKCollectionMoment *> * _Nullable)collectionMoments OBJC_DESIGNATED_INITIALIZER;
+ (void)requestCollectionById:(NSString * _Nonnull)byId completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable, id _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class RBSDKMoment;

SWIFT_CLASS_NAMED("CollectionMoment")
@interface RBSDKCollectionMoment : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull momentId;
@property (nonatomic, readonly) NSInteger position;
@property (nonatomic, readonly, copy) NSString * _Nullable caption;
@property (nonatomic, readonly, copy) NSString * _Nullable createdAt;
@property (nonatomic, readonly) NSInteger streamCount;
@property (nonatomic, readonly, strong) RBSDKMoment * _Nullable moment;
- (nonnull instancetype)initWithMomentId:(NSString * _Nonnull)momentId position:(NSInteger)position caption:(NSString * _Nullable)caption createdAt:(NSString * _Nullable)createdAt streamCount:(NSInteger)streamCount moment:(RBSDKMoment * _Nonnull)moment OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("MediaTrack")
@interface RBSDKMediaTrack : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable mediaFormat;
@property (nonatomic, readonly) NSInteger mediaFormatInt;
- (nonnull instancetype)initWithUrl:(NSURL * _Nullable)url mediaFormat:(NSString * _Nullable)mediaFormat OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, RBSDKMediaTrackMediaFormat, "MediaFormat", closed) {
  RBSDKMediaTrackMediaFormatMp4 = 0,
  RBSDKMediaTrackMediaFormatHlsv3 = 1,
  RBSDKMediaTrackMediaFormatMov = 2,
  RBSDKMediaTrackMediaFormatDash = 3,
  RBSDKMediaTrackMediaFormatWebm = 4,
  RBSDKMediaTrackMediaFormatMkv = 5,
  RBSDKMediaTrackMediaFormatFlv = 6,
  RBSDKMediaTrackMediaFormatMpeg = 7,
  RBSDKMediaTrackMediaFormatRtsp = 8,
  RBSDKMediaTrackMediaFormatUnknown = 9,
};

@class RBSDKThumbList;
@class RBSDKUser;
@class RBSDKMomentStream;

SWIFT_CLASS_NAMED("Moment")
@interface RBSDKMoment : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nullable caption;
@property (nonatomic, readonly, copy) NSString * _Nullable createdAt;
@property (nonatomic) NSInteger streamCount;
@property (nonatomic, readonly, copy) NSString * _Nullable startsAt;
@property (nonatomic, readonly, copy) NSString * _Nullable endsAt;
@property (nonatomic, readonly, copy) NSString * _Nonnull reelType;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
@property (nonatomic, readonly) BOOL switchWithAudio;
@property (nonatomic, copy) NSString * _Nullable nextPageToken;
@property (nonatomic, readonly, strong) RBSDKThumbList * _Nullable thumbs;
@property (nonatomic, readonly, strong) RBSDKUser * _Nullable user;
@property (nonatomic, copy) NSArray<RBSDKMomentStream *> * _Nullable momentStreams;
@property (nonatomic, readonly) NSInteger reelTypeInt;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id caption:(NSString * _Nullable)caption createdAt:(NSString * _Nullable)createdAt streamCount:(NSInteger)streamCount startsAt:(NSString * _Nullable)startsAt endsAt:(NSString * _Nullable)endsAt reelType:(NSString * _Nonnull)reelType tags:(NSArray<NSString *> * _Nullable)tags switchWithAudio:(BOOL)switchWithAudio nextPageToken:(NSString * _Nullable)nextPageToken thumbs:(RBSDKThumbList * _Nullable)thumbs user:(RBSDKUser * _Nonnull)user momentStreams:(NSArray<RBSDKMomentStream *> * _Nonnull)momentStreams OBJC_DESIGNATED_INITIALIZER;
+ (void)requestMomentById:(NSString * _Nonnull)byId startStreamAtPosition:(NSString * _Nonnull)startStreamAtPosition completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable, id _Nullable))completionHandler;
- (double)getDuration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, RBSDKMomentReelType, "ReelType", closed) {
  RBSDKMomentReelTypeEvent = 0,
  RBSDKMomentReelTypeSong = 1,
  RBSDKMomentReelTypeTag = 2,
};



@class RBSDKStream;

SWIFT_CLASS_NAMED("MomentStream")
@interface RBSDKMomentStream : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull streamId;
@property (nonatomic, readonly) NSInteger order;
@property (nonatomic, readonly) NSInteger offsetMilliseconds;
@property (nonatomic, readonly, strong) RBSDKClip * _Nullable clip;
@property (nonatomic, readonly, strong) RBSDKStream * _Nullable stream;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id streamId:(NSString * _Nonnull)streamId order:(NSInteger)order offsetMilliseconds:(NSInteger)offsetMilliseconds clip:(RBSDKClip * _Nullable)clip stream:(RBSDKStream * _Nonnull)stream OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("RestClient")
@interface RBSDKRestClient : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>RBSDK</code> object provide a singleton to load easily player controllers, the first
/// step is to set the secret and access keys, then use the
/// <code>-[RBSDK loadAsynchronouslyWithCompletionHandler:]</code> method to load everything.
SWIFT_CLASS_NAMED("SDK")
@interface RBSDKV2 : NSObject
+ (RBSDKV2 * _Nullable)mainAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) RBSDKRestClient * _Nonnull restClient;
@property (nonatomic, readonly) BOOL isReady;
@property (nonatomic, readonly) BOOL isLoading;
/// Set the secret, access and token key, this is needed for creating a player
/// controller
/// @param secretKey SDK’s secret key
/// @param accessKey SDK’s access key
/// @param tokenKey SDK’s token key
+ (void)setKeysWithClientId:(NSString * _Nonnull)clientId clientSecret:(NSString * _Nonnull)clientSecret accountId:(NSString * _Nonnull)accountId;
/// Use this method if you want to initialize a player a soon as posible, completion
/// handler will be called after the configuration ends, is important to check
/// if the process ended successfully or not.
/// @param completionHandler The completion handler will say if the configuration
/// was successfull or not, and if is not, check the NSError information.
+ (void)loadAsynchronouslyWithCompletionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Stream")
@interface RBSDKStream : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nullable vendorId;
@property (nonatomic, readonly, copy) NSString * _Nonnull caption;
@property (nonatomic, readonly, copy) NSString * _Nullable startedOn;
@property (nonatomic, readonly, copy) NSString * _Nonnull videoSource;
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
@property (nonatomic, readonly) NSInteger duration;
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull tags;
@property (nonatomic, readonly, strong) RBSDKThumbList * _Nullable thumbs;
@property (nonatomic, readonly, strong) RBSDKUser * _Nullable createdBy;
@property (nonatomic, readonly, copy) NSArray<RBSDKMediaTrack *> * _Nonnull mediaTracks;
@property (nonatomic, readonly, copy) NSDate * _Nonnull startedOnDate;
@property (nonatomic, readonly) NSInteger videoSourceInt;
@property (nonatomic, readonly) NSInteger statusInt;
@property (nonatomic, readonly) NSInteger categoryInt;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id vendorId:(NSString * _Nullable)vendorId caption:(NSString * _Nonnull)caption startedOn:(NSString * _Nonnull)startedOn videoSource:(NSString * _Nonnull)videoSource status:(NSString * _Nonnull)status duration:(NSInteger)duration category:(NSString * _Nonnull)category tags:(NSArray<NSString *> * _Nonnull)tags thumbs:(RBSDKThumbList * _Nullable)thumbs createdBy:(RBSDKUser * _Nonnull)createdBy mediaTracks:(NSArray<RBSDKMediaTrack *> * _Nonnull)mediaTracks OBJC_DESIGNATED_INITIALIZER;
+ (void)reportById:(NSString * _Nonnull)byId reason:(NSString * _Nonnull)reason service:(NSString * _Nonnull)service completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable, id _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, RBSDKStreamVideoSource, "VideoSource", closed) {
  RBSDKStreamVideoSourceRhinobird = 0,
  RBSDKStreamVideoSourceYoutube = 1,
  RBSDKStreamVideoSourceBrightcove = 2,
  RBSDKStreamVideoSourceSelfhosted = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, RBSDKStreamStatus, "Status", closed) {
  RBSDKStreamStatusCreated = 0,
  RBSDKStreamStatusLive = 1,
  RBSDKStreamStatusPending = 2,
  RBSDKStreamStatusArchived = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, RBSDKStreamCategory, "Category", closed) {
  RBSDKStreamCategoryExperience = 0,
  RBSDKStreamCategoryOpinion = 1,
  RBSDKStreamCategoryReaction = 2,
  RBSDKStreamCategoryExperienceRev = 3,
  RBSDKStreamCategoryLipsync = 4,
  RBSDKStreamCategoryNone = 5,
};




SWIFT_CLASS_NAMED("ThumbList")
@interface RBSDKThumbList : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nullable boxSize;
@property (nonatomic, readonly, copy) NSURL * _Nullable small;
@property (nonatomic, readonly, copy) NSURL * _Nullable medium;
@property (nonatomic, readonly, copy) NSURL * _Nullable burned;
@property (nonatomic, readonly, copy) NSURL * _Nullable large;
@property (nonatomic, readonly, copy) NSURL * _Nullable featured;
- (nonnull instancetype)initWithBoxSize:(NSURL * _Nullable)boxSize small:(NSURL * _Nullable)small medium:(NSURL * _Nullable)medium burned:(NSURL * _Nullable)burned large:(NSURL * _Nullable)large featured:(NSURL * _Nullable)featured OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("User")
@interface RBSDKUser : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull username;
@property (nonatomic, readonly, copy) NSString * _Nullable bio;
@property (nonatomic, readonly) BOOL channel;
@property (nonatomic, readonly, strong) RBSDKAvatar * _Nullable avatar;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name username:(NSString * _Nonnull)username bio:(NSString * _Nullable)bio channel:(BOOL)channel avatar:(RBSDKAvatar * _Nullable)avatar OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
